@import "../variables.scss";
@import "./spacing";
@import "./function";

@function rem($pixels, $context: $baseFontSizePx) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }

  @if (unitless($context)) {
    $context: $context * 1px;
  }

  @return $pixels / $context * 1rem;
}
@mixin make-row($gutter: $grid-gutter-width) {
  display: flex;
  flex-wrap: wrap;
  margin-right: -$gutter / 2;
  margin-left: -$gutter / 2;
}
// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths-important(
  $max-widths: $container-max-widths,
  $breakpoints: $grid-breakpoints
) {
  @each $breakpoint, $container-max-width in $max-widths {
    $infix: breakpoint-infix($breakpoint, $breakpoints);
    .col#{$infix}-reset-width {
      @include media-breakpoint-up($breakpoint, $breakpoints) {
        max-width: $container-max-width !important;
      }
    }
  }
}

// For each breakpoint, define the maximum width of the container in a media query
@mixin make-row-grid($breakpoints: $grid-breakpoints) {
  @each $breakpoint in $breakpoints {
    $infix: breakpoint-infix($breakpoint, $breakpoints);
    .row#{$infix}-enable {
      @include make-row();
    }
  }
}

// Flexbox.
@mixin flexbox {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

@mixin flex-direction($direction: row) {
  -webkit-box-orient: $direction;
  -webkit-box-direction: $direction;
  -webkit-flex-direction: $direction;
  -ms-flex-direction: $direction;
  flex-direction: $direction;
}

@mixin flex-wrap($wrap: nowrap) {
  -webkit-flex-wrap: $wrap;
  -moz-flex-wrap: $wrap;
  -ms-flex-wrap: $wrap;
  flex-wrap: $wrap;
}

@mixin justify-content($justify: flex-start) {
  -webkit-box-pack: $justify;
  -webkit-justify-content: $justify;
  -ms-justify-content: $justify;
  -ms-flex-pack: $justify;
  justify-content: $justify;
}

@mixin align-items($align: stretch) {
  -webkit-align-items: $align;
  -ms-align-items: $align;
  -ms-flex-align: $align;
  align-items: $align;
}

@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }
  @-moz-keyframes #{$name} {
    @content;
  }
  @-ms-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  }
}

@mixin transform($transforms) {
  -webkit-transform: $transforms;
  -moz-transform: $transforms;
  -ms-transform: $transforms;
  transform: $transforms;
}

@mixin padding_small {
  padding: 1.5rem 1rem;
}
@mixin box_padding($top, $right, $bottom, $left) {
  padding: $top $right $bottom $left;
}
@mixin padding_medium {
  padding: 2rem 1.5rem;
}
@mixin padding_large {
  padding: 2.5rem 2rem;
}
@mixin shadow_light {
  box-shadow: 0px 4px 25px rgba(0, 0, 0, 0.08);
}
@mixin shadow_md {
  box-shadow: 0px 2px 20px rgba(41, 51, 57, 0.7);
}
@mixin card_shadow {
  box-shadow: 0px 2px 20px rgba(41, 51, 57, 0.24);
}
@mixin shadow_deep {
  box-shadow: 0px 4px 25px rgba(0, 0, 0, 0.04);
}
@mixin family_barlow {
  font-family: "Barlow", sans-serif;
}
@mixin bg_no_repeat {
  background-size: cover;
  background-repeat: no-repeat;
}
@mixin resizeAnimation($property) {
  transition-property: $property;
  transition-duration: 800ms;
}
@mixin absolute_position($top, $right, $bottom, $left) {
  position: absolute !important;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}
@mixin flex_x_center {
  @include flex;
  justify-content: center;
  align-items: center;
}
@mixin flex_y_center {
  @include flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}
@mixin border_selected {
  content: "";
  position: absolute;
  background: none;
  height: 40%;
  transform: translateZ(-1px);
  border-bottom: 3px solid color(primary);
  border-right: none;
  bottom: -7px;
  right: -3px;
  left: 12px;
  border-radius: 0px 0px 0px 100px;
}
@mixin border_right_selected {
  border: 3px solid;
  border-image: linear-gradient(to bottom, color(_lightgrey), #f88e72) 1;
  border-left: none;
  border-top: none;
  border-bottom: none;
}

@mixin border_style($position, $size, $color) {
  @if $position == "bottom" {
    border-bottom: $size solid $color !important;
  }
  @if $position == "top" {
    border-top: $size solid $color !important;
  }
  @if $position == "left" {
    border-left: $size solid $color !important;
  }
  @if $position == "right" {
    border-right: $size solid $color !important;
  }
  @if $position == "round" {
    border: $size solid $color !important;
  }
}
@mixin image_size($width, $height) {
  width: $width;
  height: $height;
}

@mixin flex {
  display: flex !important;
}
@mixin grid {
  display: block !important;
}

@mixin row($breakpoint) {
  @include flex;
  @media screen and #{inspect(breakpoint($breakpoint))} {
    @include grid;
  }
}

@mixin responsive($property, $value, $breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media screen and #{inspect(breakpoint($breakpoint))} {
      #{$property}: $value !important;
    }
  } @else {
    @warn "No value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

@mixin device($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media screen and #{inspect(breakpoint($breakpoint))} {
      @content;
    }
  } @else {
    @warn "No value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}
